
import cv2 as cv
import numpy as np
import time
import math
import serial

arduino = serial.Serial('COM7', 115200)
time.sleep(2)

CODEWORD = [0,0,0,0]


mid_length = 110
circle_radius = 55

# Import Pre-trained architecture and weights
PROTOTXT = "MobileNetSSD_deploy (2).prototxt"
MODEL = "MobileNetSSD_deploy (2).caffemodel"

# Class list
CLASSES = ["background", "aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable",
           "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"]
# Creates a 2D numpy array that allocates each class with a corresponding RGB value
COLOURS = np.random.uniform(0, 255, size=(len(CLASSES), 3))

# Loads a pre-trained neural network model using Caffe framework, returns the loaded neural network
net = cv.dnn.readNetFromCaffe(PROTOTXT, MODEL)

# Initialize webcam (set to 0 for default webcam)
cap = cv.VideoCapture(0)

fps = 0
frame_count = 0

# Records the start time of the processing loop
start_time = time.time()

circle_center = (352, 336)
circle_center_x = 352
circle_center_y = 336

tracking = False

while True:

    ret, frame = cap.read()

    if (tracking == False):
            
            CODEWORD = [0, 0, 0, 0]

            cv.putText(frame, "detecting", (10, 50), cv.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)

            (h, w) = frame.shape[:2]

            blob = cv.dnn.blobFromImage(cv.resize(frame, (300, 300)), 0.007843, (300, 300), 127.5)

            net.setInput(blob)

            detections = net.forward()
        

        
        
            confidence = detections[0, 0, 0, 2]

            if confidence > 0.75:
                idx = int(detections[0, 0, 0, 1])

                if CLASSES[idx] != "person":
                    continue


            

                box = detections[0, 0, 0, 3:7] *np.array([w, h, w, h])
                (startX, startY, endX, endY) = box.astype("int")
                width = endX - startX
                height = endY - startY
                bbox = (startX, startY, width, height)
                tracker = cv.legacy.TrackerKCF_create()
                tracker.init(frame, bbox)
                tracking = True

        

    else:
        
        success, bbox = tracker.update(frame)

        if success:
            
            real_x, real_y, real_w, real_h = [int(v) for v in bbox]
    

            MiddleX = real_x + (real_w // 2)
            MiddleY = real_y + (real_h // 2)

            startX = MiddleX - mid_length
            endX = MiddleX + mid_length

            startY = MiddleY - mid_length
            endY = MiddleY + mid_length

            cv.rectangle(frame, (startX, startY), (endX, endY), (0, 0, 255), 2)

            cv.circle(frame, (MiddleX, MiddleY), circle_radius, (255, 0, 0), thickness = 2)

            cv.putText(frame, "tracking", (10, 50), cv.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

            CODEWORD[0] = 1  # Set first codeword digit to indicate detection

            # Determine if the person is aligned horizontally with the center of the screen
            if MiddleX - circle_radius <= circle_center_x <= MiddleX + circle_radius:
                CODEWORD[1] = 1  # Person is aligned horizontally
            elif circle_center_x > MiddleX + circle_radius:  # Move right
                CODEWORD[1] = 2
            else:  # Move left
                CODEWORD[1] = 3
        
            # Determine if the person is aligned vertically with the center of the screen
            if MiddleY - circle_radius <= circle_center_y <= MiddleY + circle_radius:
                CODEWORD[2] = 1  # Person is aligned vertically
            elif circle_center_y > MiddleY + circle_radius:  # Move down
                CODEWORD[2] = 2
            else:  # Move up
                CODEWORD[2] = 3

            # Check if the person is fully inside the firing zone
            if startX <= circle_center_x <= endX and startY <= circle_center_y <= endY:
                CODEWORD[3] = 1  # Ready to fire
            else:
                CODEWORD[3] = 0  # Not ready to fire


        else:
            tracking = False


    string_CODEWORD = ''.join(map(str, CODEWORD))

    print(string_CODEWORD)
    arduino.write((string_CODEWORD + '\n').encode())


    frame_count += 1
    elapsed_time = time.time() - start_time
    if elapsed_time > 0:
        fps = frame_count / elapsed_time

    fps_text = f"FPS: {fps:.2f}"
    cv.putText(frame, fps_text, (10, 30), cv.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    cv.circle(frame, circle_center, 15, (0, 255, 0), thickness=2)
    cv.imshow("tracking", frame)

    if cv.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
arduino.close()
cv.destroyAllWindows()


